From f0febae40522f4a485f215a1eab4221533cc256d Mon Sep 17 00:00:00 2001
From: Mat <mail@mathias.is>
Date: Mon, 3 Feb 2025 05:52:47 +0200
Subject: [PATCH] score-dialog: Implement column sorting

---
 src/score-dialog.vala | 289 +++++++++++++++++++++++-------------------
 1 file changed, 162 insertions(+), 127 deletions(-)

diff --git a/src/score-dialog.vala b/src/score-dialog.vala
index 992e849..299ef6b 100644
--- a/src/score-dialog.vala
+++ b/src/score-dialog.vala
@@ -49,18 +49,19 @@ public class ScoreDialog : Adw.Dialog {
 
     private string score_map {
         set {
+            var sorted_entries = history.entries.copy ();
+            sorted_entries.sort (player_sorter_cb);
+            sorted_entries.sort (date_sorter_cb);
+            sorted_entries.sort (rank_sorter_cb);
+
             layout_button.label = get_map_display_name (value);
             score_model.remove_all ();
 
-            var entries = history.entries.copy ();
-            entries.sort (compare_entries);
-
-            foreach (unowned var entry in entries) {
-                if (entry.name != value)
-                    continue;
-
-                score_model.append (entry);
+            foreach (unowned var entry in sorted_entries) {
+                if (entry.name == value)
+                    score_model.append (entry);
             }
+            score_view.scroll_to (0, null, Gtk.ListScrollFlags.FOCUS, null);
         }
     }
 
@@ -132,66 +133,64 @@ public class ScoreDialog : Adw.Dialog {
     }
 
     private void set_up_score_view () {
-        var factory = new Gtk.SignalListItemFactory ();
-        factory.setup.connect (item_rank_setup_cb);
-        factory.bind.connect (item_rank_bind_cb);
-        rank_column.factory = factory;
-
-        factory = new Gtk.SignalListItemFactory ();
-        factory.setup.connect (item_player_setup_cb);
-        factory.bind.connect (item_player_bind_cb);
-        player_column.factory = factory;
-
-        factory = new Gtk.SignalListItemFactory ();
-        factory.setup.connect (item_time_setup_cb);
-        factory.bind.connect (item_time_bind_cb);
-        time_column.factory = factory;
-
-        factory = new Gtk.SignalListItemFactory ();
-        factory.setup.connect (item_date_setup_cb);
-        factory.bind.connect (item_date_bind_cb);
-        date_column.factory = factory;
+        set_up_rank_column ();
+        set_up_player_column ();
+        set_up_time_column ();
+        set_up_date_column ();
 
         score_model = new ListStore (typeof (HistoryEntry));
-        score_view.model = new Gtk.NoSelection (score_model);
+        var sort_model = new Gtk.SortListModel (score_model, score_view.sorter);
+        score_view.model = new Gtk.NoSelection (sort_model);
+        score_view.sort_by_column (rank_column, Gtk.SortType.ASCENDING);
+
+        score_view.sorter.changed.connect (() => {
+            /* Scroll to top when resorting */
+            score_view.scroll_to (0, null, Gtk.ListScrollFlags.FOCUS, null);
+        });
     }
 
-    private string get_map_display_name (string name) {
-        unowned var map = maps.first ();
-        var display_name = name;
-        do {
-            if (map.data.score_name == name) {
-                display_name = dpgettext2 (null, "mahjongg map name", map.data.name);
-                break;
-            }
-        }
-        while ((map = map.next) != null);
-        return display_name;
+    private static int rank_sorter_cb (HistoryEntry entry1, HistoryEntry entry2) {
+        return (int) (entry1.duration > entry2.duration) - (int) (entry1.duration < entry2.duration);
     }
 
-    private void set_map_cb (SimpleAction action, Variant variant) {
-        var name = variant.get_string ();
-        action.set_state (variant);
-        score_map = name;
+    private static int player_sorter_cb (HistoryEntry entry1, HistoryEntry entry2) {
+        return strcmp (entry1.player, entry2.player);
     }
 
-    private static int compare_entries (HistoryEntry a, HistoryEntry b) {
-        var d = strcmp (a.name, b.name);
-        if (d != 0)
-            return d;
-        if (a.duration != b.duration)
-            return (int) a.duration - (int) b.duration;
-        return a.date.compare (b.date);
+    private static int date_sorter_cb (HistoryEntry entry1, HistoryEntry entry2) {
+        return entry2.date.compare (entry1.date);
     }
 
-    private void item_rank_setup_cb (Gtk.SignalListItemFactory factory, Object list_item) {
-        var label = new Gtk.Label (null) {
-            width_chars = 3,
-            xalign = 0
-        };
-        label.add_css_class ("caption");
-        label.add_css_class ("numeric");
-        ((Gtk.ListItem) list_item).child = label;
+    private void set_up_rank_column () {
+        var factory = new Gtk.SignalListItemFactory ();
+        var sorter = new Gtk.MultiSorter ();
+
+        factory.setup.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            var label = new Gtk.Label (null) {
+                width_chars = 3,
+                xalign = 0
+            };
+            label.add_css_class ("caption");
+            label.add_css_class ("numeric");
+            list_item.child = label;
+        });
+        factory.bind.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            unowned var label = list_item.child as Gtk.Label;
+            unowned var entry = list_item.item as HistoryEntry;
+
+            uint position;
+            score_model.find (entry, out position);
+
+            label.label = (position + 1).to_string ();
+        });
+        sorter.append (new Gtk.CustomSorter (rank_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (date_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (player_sorter_cb));
+
+        rank_column.sorter = sorter;
+        rank_column.factory = factory;
     }
 
     private static void connect_entry_input (Gtk.Entry entry_input, Gtk.ListItem list_item) {
@@ -207,93 +206,129 @@ public class ScoreDialog : Adw.Dialog {
         });
     }
 
-    private void item_player_setup_cb (Gtk.SignalListItemFactory factory, Object object) {
-        var stack = new Gtk.Stack ();
-        stack.add_named (new Gtk.Inscription (null), "label");
+    private void set_up_player_column () {
+        var factory = new Gtk.SignalListItemFactory ();
+        var sorter = new Gtk.MultiSorter ();
+
+        factory.setup.connect ((factory, object) => {
+            var stack = new Gtk.Stack ();
+            stack.add_named (new Gtk.Inscription (null), "label");
 
-        unowned var list_item = object as Gtk.ListItem;
-        var entry_input = new Gtk.Entry () {
-            has_frame = false,
-            max_width_chars = 5
-        };
+            unowned var list_item = object as Gtk.ListItem;
+            var entry_input = new Gtk.Entry () {
+                has_frame = false,
+                max_width_chars = 5
+            };
 
-        connect_entry_input (entry_input, list_item);
-        entry_input.activate.connect (() => {
-            new_game_button.activate ();
+            connect_entry_input (entry_input, list_item);
+            entry_input.activate.connect (() => {
+                new_game_button.activate ();
+            });
+
+            stack.add_named (entry_input, "entry");
+            list_item.child = stack;
         });
+        factory.bind.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            unowned var stack = list_item.child as Gtk.Stack;
+            unowned var entry = list_item.item as HistoryEntry;
+
+            if (entry == selected_entry) {
+                stack.visible_child_name = "entry";
+                unowned var text_entry = stack.visible_child as Gtk.Entry;
+                text_entry.text = entry.player;
+                text_entry.add_css_class ("heading");
+                selected_item = list_item;
+            }
+            else {
+                stack.visible_child_name = "label";
+                unowned var inscription = stack.visible_child as Gtk.Inscription;
+                inscription.text = entry.player;
+            }
+        });
+        sorter.append (new Gtk.CustomSorter (player_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (rank_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (date_sorter_cb));
 
-        stack.add_named (entry_input, "entry");
-        list_item.child = stack;
+        player_column.sorter = sorter;
+        player_column.factory = factory;
     }
 
-    private void item_time_setup_cb (Gtk.SignalListItemFactory factory, Object list_item) {
-        var label = new Gtk.Inscription (null);
-        label.add_css_class ("numeric");
-        ((Gtk.ListItem) list_item).child = label;
-    }
+    private void set_up_time_column () {
+        var factory = new Gtk.SignalListItemFactory ();
 
-    private void item_date_setup_cb (Gtk.SignalListItemFactory factory, Object object) {
-        unowned var list_item = object as Gtk.ListItem;
-        var label = new Gtk.Label (null) { xalign = 0 };
+        factory.setup.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            var label = new Gtk.Inscription (null);
 
-        label.add_css_class ("numeric");
-        list_item.child = label;
-    }
+            label.add_css_class ("numeric");
+            list_item.child = label;
+        });
+        factory.bind.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            unowned var label = list_item.child as Gtk.Inscription;
+            unowned var entry = list_item.item as HistoryEntry;
+
+            var time_label = "%us".printf (entry.duration);
+            if (entry.duration >= 60)
+                time_label = "%um %us".printf (entry.duration / 60, entry.duration % 60);
+            if (entry == selected_entry)
+                label.add_css_class ("heading");
+
+            label.text = time_label;
+        });
 
-    private void item_rank_bind_cb (Gtk.SignalListItemFactory factory, Object object) {
-        unowned var list_item = object as Gtk.ListItem;
-        unowned var label = list_item.child as Gtk.Label;
-        unowned var entry = list_item.item as HistoryEntry;
+        time_column.sorter = rank_column.sorter;
+        time_column.factory = factory;
+    }
 
-        uint position;
-        score_model.find (entry, out position);
+    private void set_up_date_column () {
+        var factory = new Gtk.SignalListItemFactory ();
+        var sorter = new Gtk.MultiSorter ();
 
-        label.label = (position + 1).to_string ();
-    }
+        factory.setup.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            var label = new Gtk.Label (null) { xalign = 0 };
 
-    private void item_player_bind_cb (Gtk.SignalListItemFactory factory, Object object) {
-        unowned var list_item = object as Gtk.ListItem;
-        unowned var stack = list_item.child as Gtk.Stack;
-        unowned var entry = list_item.item as HistoryEntry;
-
-        if (entry == selected_entry) {
-            stack.visible_child_name = "entry";
-            unowned var text_entry = stack.visible_child as Gtk.Entry;
-            text_entry.text = entry.player;
-            text_entry.add_css_class ("heading");
-            selected_item = list_item;
-        }
-        else {
-            stack.visible_child_name = "label";
-            unowned var inscription = stack.visible_child as Gtk.Inscription;
-            inscription.text = entry.player;
-        }
-    }
+            label.add_css_class ("numeric");
+            list_item.child = label;
+        });
+        factory.bind.connect ((factory, object) => {
+            unowned var list_item = object as Gtk.ListItem;
+            unowned var label = list_item.child as Gtk.Label;
+            unowned var entry = list_item.item as HistoryEntry;
 
-    private void item_time_bind_cb (Gtk.SignalListItemFactory factory, Object object) {
-        unowned var list_item = object as Gtk.ListItem;
-        unowned var label = list_item.child as Gtk.Inscription;
-        unowned var entry = list_item.item as HistoryEntry;
+            var date_label = entry.date.format ("%x");
+            if (entry == selected_entry)
+                label.add_css_class ("heading");
 
-        var time_label = "%us".printf (entry.duration);
-        if (entry.duration >= 60)
-            time_label = "%um %us".printf (entry.duration / 60, entry.duration % 60);
-        if (entry == selected_entry)
-            label.add_css_class ("heading");
+            label.label = date_label;
+        });
+        sorter.append (new Gtk.CustomSorter (date_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (rank_sorter_cb));
+        sorter.append (new Gtk.CustomSorter (player_sorter_cb));
 
-        label.text = time_label;
+        date_column.sorter = sorter;
+        date_column.factory = factory;
     }
 
-    private void item_date_bind_cb (Gtk.SignalListItemFactory factory, Object object) {
-        unowned var list_item = object as Gtk.ListItem;
-        unowned var label = list_item.child as Gtk.Label;
-        unowned var entry = list_item.item as HistoryEntry;
-
-        var date_label = entry.date.format ("%x");
-        if (entry == selected_entry)
-            label.add_css_class ("heading");
+    private string get_map_display_name (string name) {
+        unowned var map = maps.first ();
+        var display_name = name;
+        do {
+            if (map.data.score_name == name) {
+                display_name = dpgettext2 (null, "mahjongg map name", map.data.name);
+                break;
+            }
+        }
+        while ((map = map.next) != null);
+        return display_name;
+    }
 
-        label.label = date_label;
+    private void set_map_cb (SimpleAction action, Variant variant) {
+        var name = variant.get_string ();
+        action.set_state (variant);
+        score_map = name;
     }
 
     private void score_view_focus_cb () {
-- 
GitLab

