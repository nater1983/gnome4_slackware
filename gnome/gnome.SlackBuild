#!/bin/sh
# Gnome.SlackBuild Script
# Adapted for GNOME packages from download.gnome.org.

# Set up general build options
CLEANUP=${CLEANUP:-"yes"}       # Clean up after build
UPGRADE=${UPGRADE:-"yes"}       # Upgrade package after successful build
PRECHECK=${PRECHECK:-"no"}      # Perform a pre-check of sources
GRACETME=${GRACETME:-"10"}      # Grace time before build starts
SKIPBUILT=${SKIPBUILT:-"yes"}   # Skip already built packages
EXITFAIL=${EXITFAIL:-"yes"}     # Exit on build failure

# GNOME Download base URI
GNOME_DOWNLOAD_URI="https://download.gnome.org/sources"

# Function to get base name of the package (remove .tar extensions)
pkgbase() {
  PKGEXT=$(echo $1 | rev | cut -f 1 -d . | rev)
  case $PKGEXT in
    'gz' ) PKGRETURN=$(basename $1 .tar.gz) ;;
    'bz2' ) PKGRETURN=$(basename $1 .tar.bz2) ;;
    'xz' ) PKGRETURN=$(basename $1 .tar.xz) ;;
    *) PKGRETURN=$(basename $1) ;;
  esac
  echo $PKGRETURN
}

# Set initial directory variables
cd "$(dirname "$0")"
CWD=$(pwd)
TMP=${TMP:-/tmp}
GNOME_BUILD_DIR=${GNOME_BUILD_DIR:-$TMP/gnome_build}
mkdir -p "$TMP" "$GNOME_BUILD_DIR"

# Extract source archive
extract_archive() {
  local src_archive
  src_archive=$(find "$CWD/src" -name "$1" | tail -1)
  tar -xf "$src_archive" -C "$GNOME_BUILD_DIR" || return 1
}

# Pre-check for GNOME packages
precheck() {
  RETVAL=0
  for SRCFILE in $(find "$CWD/src" -name "*.tar.?z*" | grep -vE ".asc$|.sig$"); do
    PKGBASE=$(pkgbase "$SRCFILE")
    if ! grep -wq "${PKGBASE}$" modules/* ; then
      echo "Source file '$(basename "$SRCFILE")' is not mentioned in 'modules' ($PKGBASE)!"
      RETVAL=1
    fi
  done

  if [ $RETVAL -eq 0 ]; then
    echo "Check complete, build starts in ${GRACETME} seconds..."
    sleep "${GRACETME}"
  else
    echo "Precheck failed with error code '$RETVAL'."
    exit 1
  fi
}

# Function to fix permissions
fix_perms() {
  target_dir=$1
  [ -z "$target_dir" ] && target_dir='.'
  chown -R root:root "$target_dir"
  find "$target_dir" \
   \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
   -exec chmod 755 {} \+ -o \
   \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
   -exec chmod 644 {} \+
  # Also strip rpaths:
  for file in $(find $target_dir | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : 2> /dev/null) ; do
    if [ ! "$(patchelf --print-rpath $file 2> /dev/null)" = "" ]; then
      patchelf --remove-rpath $file
    fi
  done
}

process_man_pages() {
  # Compress and if needed symlink the man pages:
  if [ -d usr/man ]; then
    ( cd usr/man
      for manpagedir in $(find . -type d -name "man*") ; do
      ( cd $manpagedir
        for eachpage in $( find . -type l -maxdepth 1) ; do
          ln -s $( readlink $eachpage ).gz $eachpage.gz
          rm $eachpage
        done
        gzip -9 *.*
      )
      done
    )
  fi
}

process_info_pages() {
  # Compress info pages and purge "dir" file from the package:
  if [ -d usr/info ]; then
    ( cd usr/info
      rm -f dir
      gzip -9 *
    )
  fi
}

no_usr_share_doc() {
  # If there are docs, move them:
  if [ -d usr/share/doc ]; then
    mkdir -p usr/doc
    mv usr/share/doc/* usr/doc
    rmdir usr/share/doc
  fi
}

# Download and build function for GNOME packages
download_and_build_gnome_pkg() {
  local pkg_name=$1
  local pkg_version
  if [ -z "$pkg_name" ]; then
    echo "Specify a GNOME package to build."
    exit 1
  fi

  # Find and extract version from SlackBuild file
  local slackbuild_file
  slackbuild_file=$(find "$CWD" -name "${pkg_name}.SlackBuild" | head -1)
  if [ -z "$slackbuild_file" ]; then
    echo "SlackBuild file for $pkg_name not found."
    exit 1
  fi

  # Extract the VERSION from the SlackBuild file
  pkg_version=$(grep -E "^VERSION=" "$slackbuild_file" | sed 's/VERSION=//; s/"//g')
  if [ -z "$pkg_version" ]; then
    echo "Failed to retrieve version from $slackbuild_file."
    exit 1
  fi

  echo "Building $pkg_name version $pkg_version"

  # Formulate download URL based on package name and version
  local download_url="${GNOME_DOWNLOAD_URI}/${pkg_name}/${pkg_version}/${pkg_name}-${pkg_version}.tar.xz"
  local src_path="$CWD/src/${pkg_name}-${pkg_version}.tar.xz"

  # Download source if missing
  if [ ! -f "$src_path" ]; then
    wget "$download_url" -O "$src_path"
    if [ $? -ne 0 ]; then
      echo "Failed to download $pkg_name version $pkg_version"
      exit 1
    fi
  fi

  # Extract and build
  extract_archive "${pkg_name}-${pkg_version}.tar.xz"
  cd "$GNOME_BUILD_DIR/$pkg_name-$pkg_version" || exit 1
  ./configure --prefix=/usr
  make || exit 1
  make install DESTDIR="$GNOME_BUILD_DIR/pkg" || exit 1
}

# Example usage
if [ "$1" = "precheck" ]; then
  precheck
elif [ "$1" ]; then
  download_and_build_gnome_pkg "$1"
else
  echo "Usage: $0 <pkg_name> or $0 precheck"
  exit 1
fi
