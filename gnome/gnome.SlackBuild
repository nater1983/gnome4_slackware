#!/bin/sh
# Gnome.SlackBuild Script
# Adapted for GNOME packages from download.gnome.org.

# General build options
CLEANUP=${CLEANUP:-"yes"}       # Clean up after build
UPGRADE=${UPGRADE:-"yes"}       # Upgrade package after successful build
PRECHECK=${PRECHECK:-"no"}      # Perform a pre-check of sources
GRACETIME=${GRACETIME:-"10"}    # Grace time before build starts
SKIPBUILT=${SKIPBUILT:-"yes"}   # Skip already built packages
EXITFAIL=${EXITFAIL:-"yes"}     # Exit on build failure
GNOME=${GNOME:-"47"}

# GNOME Download base URI
GNOME_DOWNLOAD_URI="https://download.gnome.org/sources"

# Function to get the base name of the package (remove .tar extensions)
pkgbase() {
  PKGEXT=$(echo $1 | rev | cut -f 1 -d . | rev)
  case $PKGEXT in
    'gz' ) PKGRETURN=$(basename $1 .tar.gz) ;;
    'bz2' ) PKGRETURN=$(basename $1 .tar.bz2) ;;
    'xz' ) PKGRETURN=$(basename $1 .tar.xz) ;;
    *) PKGRETURN=$(basename $1) ;;
  esac
  echo $PKGRETURN
}

# Set up build directories and clean up
setup_directories() {
  cd "$(dirname "$0")"
  CWD=$(pwd)
  TMP=${TMP:-/tmp}
  GNOME_BUILD_DIR=${GNOME_BUILD_DIR:-$TMP/gnome_build}
  rm -fr "$GNOME_BUILD_DIR"
  mkdir -p "$TMP" "$GNOME_BUILD_DIR"
  PKG=$GNOME_BUILD_DIR/package-${MODPKG}
  rm -rf $PKG
  mkdir -p $PKG
}

# Function to extract source archive
extract_archive() {
  local src_archive
  src_archive=$(find "$CWD/src" -name "$1" | tail -1)
  if [ -z "$src_archive" ]; then
    echo "Source archive $1 not found!"
    return 1
  fi
  tar -xf "$src_archive" -C "$GNOME_BUILD_DIR" || return 1
}

# Pre-check for GNOME packages
precheck() {
  RETVAL=0

  for SRCFILE in $(find $CWD/src -name "*.tar.?z*" |grep -vE ".asc$|.sig$") ; do
    PKGSRC=$(echo $SRCFILE | rev | cut -f2- -d- | cut -f1,2 -d/ | rev)
    PKGBASE=$(basename $(grep -lw $PKGSRC $CWD/pkgsrc/* 2>/dev/null) 2>/dev/null)
    if [ -z "$PKGBASE" ]; then
      PKGBASE=$(basename $SRCFILE | rev | cut -f2- -d- | rev)
    fi
    PKGTGT=$(grep -w ${PKGBASE}$ modules/*)
    if [ -n "$(echo $PKGTGT | cut -d: -f2- | grep "^ *#")" ]; then
      echo "Source file '$(basename $SRCFILE)' is commented out: ($PKGTGT) !"
    elif cat package-blacklist | grep -v "^ *#" | grep -wq ${PKGBASE}$ ; then
      echo "Source file '$(basename $SRCFILE)' is on the package-blacklist ($PKGBASE) !"
    elif ! cat modules/* | grep -v "^ *#" | grep -wq ${PKGBASE}$ ; then
      echo "Source file '$(basename $SRCFILE)' is not mentioned in 'modules' ($PKGBASE) !"
      RETVAL=1
    fi
  done

  PKGDUP="$(cat $CWD/modules/* | grep -v "^ *#" | grep -v "^$" | sort | uniq -d)"
  if [ -n "$PKGDUP" ] ; then
    echo "Multiply-defined package names: '$(echo $PKGDUP)'"
    RETVAL=1
  fi
  unset PKGDUP

  for MODPKG in $(cat $CWD/modules/* | grep -v "^ *#") ; do
    if [ -f $CWD/pkgsrc/$MODPKG ]; then
      MODBASE=$(basename $(cat $CWD/pkgsrc/$MODPKG))
      MODLOC=$(dirname $(cat $CWD/pkgsrc/$MODPKG))/
    else
      MODBASE=$MODPKG
      MODLOC=""
    fi
    MODSRC="$(find $CWD/src/$MODLOC -name $MODBASE-*.tar.* |grep -vE ".asc$|.sig$" |grep -E "$MODBASE-[^-]+.tar.*$|$MODBASE-[0-9].+.tar.*$")"
    if [ -z "$MODSRC" ] ; then
      echo "Module '$MODPKG' does not have a matching source tarball ($MODLOC$MODBASE)!"
      if [ "$CHECKOUT" = "yes" -o "$CHECKOUT" = "YES" ]; then
        THEDATE=$(date +%Y%m%d)
        echo "Checking out ${MODLOC}:${MODBASE} at date ${THEDATE}."
        $CWD/plasma_checkout.sh -c -d ${THEDATE} -o $CWD/src ${MODLOC}:${MODBASE}
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
          echo "Error while checking out '$MODPKG' ($MODLOC/$MODBASE) !"
          mv $CWD/src/$MODLOC/${MODBASE}-${THEDATE}git.tar.xz $CWD/src/$MODLOC/${MODBASE}-${THEDATE}git.tar.xz.failed
        fi
      else
        RETVAL=1
      fi
    fi
    if [ -z "$(find $CWD/slack-desc -name ${MODPKG})" ] ; then
      echo "Module '$MODPKG' does not have a slack-desc file !"
      RETVAL=1
    fi
  done

  if [ $RETVAL -eq 0 ]; then
    echo "Check complete, build starts in ${GRACETIME} seconds.."
    sleep ${GRACETIME}
  else
    echo "Precheck failed with error code '$RETVAL'."
    exit 1
  fi
}

# Function to fix permissions
fix_perms() {
  target_dir=$1
  [ -z "$target_dir" ] && target_dir='.'
  chown -R root:root "$target_dir"
  find "$target_dir" \
    \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
    -exec chmod 755 {} \+ -o \
    \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
    -exec chmod 644 {} \+
  for file in $(find $target_dir | xargs file | grep -e "executable" -e "shared object" | grep ELF | cut -f 1 -d : 2> /dev/null) ; do
    if [ ! "$(patchelf --print-rpath $file 2> /dev/null)" = "" ]; then
      patchelf --remove-rpath $file
    fi
  done
}

# Function to process man pages
process_man_pages() {
  if [ -d usr/man ]; then
    ( cd usr/man
      for manpagedir in $(find . -type d -name "man*") ; do
        ( cd $manpagedir
          for eachpage in $(find . -type l -maxdepth 1) ; do
            ln -s $(readlink $eachpage).gz $eachpage.gz
            rm $eachpage
          done
          gzip -9 *.*
        )
      done
    )
  fi
}

# Function to process info pages
process_info_pages() {
  if [ -d usr/info ]; then
    ( cd usr/info
      rm -f dir
      gzip -9 *
    )
  fi
}

# Function to handle docs
no_usr_share_doc() {
  if [ -d usr/share/doc ]; then
    mkdir -p usr/doc
    mv usr/share/doc/* usr/doc
    rmdir usr/share/doc
  fi
}

# Download and build GNOME package
download_and_build_gnome_pkg() {
  local pkg_name=$1
  local pkg_version
  if [ -z "$pkg_name" ]; then
    echo "Specify a GNOME package to build."
    exit 1
  fi

  slackbuild_file=$(find "$CWD" -name "${pkg_name}.SlackBuild" | head -1)
  if [ -z "$slackbuild_file" ]; then
    echo "SlackBuild file for $pkg_name not found."
    exit 1
  fi

  pkg_version=$(grep -E "^VERSION=" "$slackbuild_file" | sed 's/VERSION=//')
  if [ -z "$pkg_version" ]; then
    echo "Could not determine version for $pkg_name."
    exit 1
  fi

  echo "Building $pkg_name version $pkg_version..."
  cd "$GNOME_BUILD_DIR"
  bash "$slackbuild_file"

  if [ $? -ne 0 ]; then
    echo "Build failed for $pkg_name."
    exit 1
  fi
  echo "$pkg_name version $pkg_version built successfully."
}

# Main script logic
if [ "$PRECHECK" == "yes" ]; then
  precheck
fi

# Build GNOME packages
for package in $(cat $CWD/modules/* | grep -v "^ *#"); do
  download_and_build_gnome_pkg "$package"
done

